SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
lambda[which(SSE == min(SSE))]
set.seed(4) # to ensure the outcome is consistent
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
set.seed(4) # to ensure the outcome is consistent, 4 stands for hw4
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
dwtest(m)
plot(m, which = 1)
plot(m, which = 1)
plot(m, which = 2)
summary(m)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ log(X))
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
Y = Y/100000
lambda <- seq(-0.5, 0, .01)
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
SSE = rep("NA", length(lambda))
for(i in 1:length(lambda)){
if(lambda[i] != 0){
W = K1[i] * (Y^lambda[i] - 1)
}
else{
W = K2 * log(Y)
}
m = lm(W ~ X)
SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
lambda[which(SSE == min(SSE))]
set.seed(4) # to ensure the outcome is consistent, 4 stands for hw4
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
Y = Y/100000
lambda <- seq(-0.5, 0, .01)
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
SSE = rep("NA", length(lambda))
for(i in 1:length(lambda)){
if(lambda[i] != 0){
W = K1[i] * (Y^lambda[i] - 1)
}
else{
W = K2 * log(Y)
}
m = lm(W ~ X)
SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
lambda[which(SSE == min(SSE))]
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
m
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
plot(new_Y, X)
m
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(new_Y, X)
abline(new_m)
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(new_Y, X)
abline(new_m)
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
abline(new_m, color = 2)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(new_Y, X)
abline(new_m, color = 2)
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
plot(X, new_Y)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(X, new_Y)
abline(new_m, color = 2)
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(X, new_Y)
abline(new_m, color = "red")
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
lambda = -0.26
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(X, new_Y)
abline(new_m, color = "red")
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
dwtest(m)
new_y1_est = new_m$coefficients %*% c(1, 1100)
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, 4900)
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
new_X = log(X)
new_m = lm(new_Y ~ new_X)
new_m
plot(new_X, new_Y)
abline(new_m, color = "red")
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
?%*%
? %*%
new_y1_est = new_m$coefficients %*% c(1, log(1100))
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, log(4900))
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
new_y1_est = new_m$coefficients %*% c(1, log(1100))
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, log(4900))
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
new_m$coefficients
set.seed(1) # to ensure the outcome is consistent, 4 stands for hw4
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
Y = Y/100000
lambda <- seq(-0.5, 0, .01)
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
SSE = rep("NA", length(lambda))
for(i in 1:length(lambda)){
if(lambda[i] != 0){
W = K1[i] * (Y^lambda[i] - 1)
}
else{
W = K2 * log(Y)
}
m = lm(W ~ X)
SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
lambda[which(SSE == min(SSE))]
lambda = -0.16
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
new_m
plot(X, new_Y)
abline(new_m, color = "red")
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
dwtest(m)
new_X = log(X)
new_m = lm(new_Y ~ new_X)
new_m
plot(new_X, new_Y)
abline(new_m, color = "red")
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
new_y1_est = new_m$coefficients %*% c(1, log(1100))
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, log(4900))
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
new_m$coefficients
plot(log(X), new_Y)
abline(new_m$coefficients)
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
dwtest(new_m)
mydata <- read.table("APPENC05.txt", col.names = c("ID",
"PSA", "Cancer Volume", "Weight", "Age", "BPH", "SVI", "CP", "GS"))
Y <- mydata$PSA
X <- mydata$Cancer.Volume
m <- lm(Y ~ X)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
lambda <- seq(-.5, .5, .01)
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
SSE = rep("NA", length(lambda))
for(i in 1:length(lambda)){
if(lambda[i] != 0){
W = K1[i] * (Y^lambda[i] - 1)
}
else{
W = K2 * log(Y)
}
m = lm(W ~ X)
SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
lambda[which(SSE == min(SSE))]
set.seed(2)
mydata <- read.table("APPENC05.txt", col.names = c("ID",
"PSA", "Cancer Volume", "Weight", "Age", "BPH", "SVI", "CP", "GS"))
Y <- mydata$PSA
X <- mydata$Cancer.Volume
m <- lm(Y ~ X)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
lambda <- seq(-.5, .5, .01)
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
SSE = rep("NA", length(lambda))
for(i in 1:length(lambda)){
if(lambda[i] != 0){
W = K1[i] * (Y^lambda[i] - 1)
}
else{
W = K2 * log(Y)
}
m = lm(W ~ X)
SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
lambda[which(SSE == min(SSE))]
lambda = 0.1
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
m
new_y_est = new_m$coefficients %*% c(1, 20)
y_est = (new_y_est/K1 + 1) ^ (1/lambda)
y_est
plot(X, new_Y)
abline(new_m$coefficients)
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
dwtest(new_m)
log10
log(10)
log(exp)1
log(exp(1))
lambda = 0.1
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
m
new_y_est = new_m$coefficients %*% c(1, 20)
y_est = (new_y_est/K1 + 1) ^ (1/lambda)
y_est
new_m
lambda = 0.1
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
new_Y = K1 * (Y^lambda - 1)
new_m = lm(new_Y ~ X)
plot(X, new_Y)
abline(new_m$coefficients)
summary(new_m)
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
dwtest(new_m)
new_X = log(X)
new_m = lm(new_Y ~ new_X)
new_m
plot(new_X, new_Y)
abline(new_m, color = "red")
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
new_y_est = new_m$coefficients %*% c(1, 20)
y_est = (new_y_est/K1 + 1) ^ (1/lambda)
y_est
new_y_est = new_m$coefficients %*% c(1, log(20))
y_est = (new_y_est/K1 + 1) ^ (1/lambda)
y_est
plot(new_X, new_Y)
abline(new_m$coefficients)
plot(new_m, which = 2)
plot(new_m, which = 3)
plot(new_m, which = 1)
dwtest(new_m)
y1_est
new_y1_est = new_m$coefficients %*% c(1, log(1100))
y1_est = (new_y1_est/K1 + 1) ^ (1/lambda) * 100000
new_y2_est = new_m$coefficients %*% c(1, log(4900))
y2_est = (new_y2_est/K1 + 1) ^ (1/lambda) * 100000
c(y1_est, y2_est)
mydata = read.table("CH03PR15.txt")
Y = mydata$V1
X = mydata$V2
plot(X, Y)
lambda <- c(-.2, -.1, 0, .1, .2)
K2 <- prod(Y) ^ (1/length(Y))
K1 <- 1/(lambda * K2 ^ (lambda -1))
SSE = rep("NA", length(lambda))
for(i in 1:length(lambda)){
if(lambda[i] != 0){
W = K1[i] * (Y^lambda[i] - 1)
}
else{
W = K2 * log(Y)
}
m = lm(W ~ X)
SSE[i] = sum(m$residuals ^ 2)
}
plot(lambda, SSE, main = "Plot of SSE against lambda")
SSE
set.seed(1) # to ensure the outcome is consistent, 4 stands for hw4
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
mfrow(par(2,2))
set.seed(1) # to ensure the outcome is consistent, 4 stands for hw4
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
mfrow = c(2, 2)
plot(X, Y)
abline(m$coefficients)
summary(m)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
dwtest(m)
set.seed(1) # to ensure the outcome is consistent, 4 stands for hw4
library(lmtest)
mydata <- read.table("APPENC07.txt", col.names = c("ID", "Sales Price", "Square feet", "bedrooms", "bathrooms", "AC", "Garage", "Pool", "Year", "Quality", "Style", "Lot", "Highway"))
sample_case = sample(1:nrow(mydata), 200)
Y <- mydata$Sales.Price[sample_case]
X <- mydata$Square.feet[sample_case]
m <- lm(Y ~ X)
mfrow = c(2, 2)
plot(X, Y)
abline(m$coefficients)
plot(m, which = 2)
plot(m, which = 3)
plot(m, which = 1)
summary(m)
dwtest(m)
install.packages("tidyverse")
library(tidyverse)
setwd("~/Git-leemingee/PoodleKFC")
img <- readImage("chicken.jpg")
library(EBImage)
img <- readImage("chicken.jpg")
print(img)
display(img)
options("EBImage.display"= "raster")
load("zipcode.RData")
str(img)
dim(img)
imageData(img)
hist(img)
Sys.time()
hist(img)
system.file()
Sys.time()
hist(img)
Sys.time()
# resize the images
img_small <- resize(img, 128, 128) # download sample algorithm
display(img_small)
img_all <- EBImage::combine(img_small, img) # really generate a new image
img_bright <- img + 0.2
img_dark <- img - 0.2
display(combine(img_bright, img_dark), all=TRUE)
rm(list = ls())
img <- readImage("chicken.jpg")
display(channel(img_zip, mode='asred'))
display(channel(img_zip, mode='asred'))
display(channel(img, mode='asred'))
## filtering the most important one in this test
## each pixel will be more closer to each other
f_low <- makeBrush(21, shape='disc', step=FALSE)
display(f_low, title='Disc filter')
# Low-pass linear filtering: to blur images, remove noise…
f_high <- matrix(1, nc=3, nr=3)
f_high[2,2] <- -8
img_highPass <- filter2(img, f_high)
display(img_highPass, title='Filtered image')
setwd("~/Git-leemingee/PoodleKFC/test for EBImage")
require("rPython")
install.packages("rPython")
library(rPython)
import numpy as npk
install.packages("RJSONIO")
install.packages("RJSONIO")
quit()
